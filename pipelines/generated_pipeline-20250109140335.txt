Creating a CI/CD pipeline using AWS CodeDeploy to deploy a microservice application to Amazon EKS (Elastic Kubernetes Service) with Helm involves several steps. Below, I outline a sample pipeline definition along with best practices and a guidance document.

### AWS CodeDeploy CI/CD Pipeline for EKS Deployment

#### Prerequisites
1. **AWS Account**: Ensure you have access to an AWS account.
2. **EKS Cluster**: Have an EKS cluster set up.
3. **Helm**: Install Helm on your local machine or CI/CD environment.
4. **Docker**: Ensure Docker is installed for building images.
5. **AWS CLI**: Install and configure the AWS CLI.
6. **IAM Roles**: Ensure proper IAM roles are set up for CodeDeploy and EKS.

#### Sample Pipeline Definition (using AWS CodePipeline)

```yaml
# pipeline.yaml
Version: 1
Resources:
  SamplePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: arn:aws:iam::your-account-id:role/CodePipelineServiceRole
      ArtifactStore:
        Type: S3
        Location: your-s3-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: your-repo-name
                BranchName: main

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: your-codebuild-project

        - Name: Deploy
          Actions:
            - Name: DeployToEKS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ApplicationName: your-application-name
                DeploymentGroupName: your-deployment-group-name
```

### CodeBuild Project Definition

```yaml
# buildspec.yml
version: 0.2

phases:
  install:
    runtime-versions:
      docker: 19
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region your-region | docker login --username AWS --password-stdin your-account-id.dkr.ecr.your-region.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t your-image-name .
      - docker tag your-image-name:latest your-account-id.dkr.ecr.your-region.amazonaws.com/your-image-name:latest
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push your-account-id.dkr.ecr.your-region.amazonaws.com/your-image-name:latest
      - echo Writing image definitions...
      - printf '[{"name":"your-container-name","imageUri":"%s"}]' your-account-id.dkr.ecr.your-region.amazonaws.com/your-image-name:latest > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
```

### Helm Chart Configuration

1. Create a Helm chart for your microservice. You can use the `helm create` command to scaffold it.
2. Configure the `values.yaml` to set up environment variables, service configurations, and replica settings.

### Deployment Group in CodeDeploy

When configuring your deployment group in AWS CodeDeploy, ensure you specify:
- **Deployment type**: Blue/Green or In-place based on your requirements.
- **EKS Cluster**: The name of the EKS cluster you are deploying to.
- **Service role**: An IAM role with permissions to access EKS and other necessary resources.

### Best Practices

1. **Security**:
   - Use AWS IAM roles and policies for least privilege access.
   - Use Secrets Manager or Parameter Store for sensitive data.
   - Implement security scanning for Docker images using tools like Amazon Inspector or Clair.

2. **Monitoring**:
   - Integrate with monitoring tools such as AWS CloudWatch or Prometheus.
   - Consider using a service mesh (like Istio or Linkerd) for managing microservice communication.

3. **Maintainability**:
   - Ensure proper logging is in place with tools like Fluentd or AWS CloudWatch logs.
   - Utilize Kubernetes health checks (liveness and readiness probes).

4. **Scalability**:
   - Use Horizontal Pod Autoscaler (HPA) for scaling based on metrics.
   - Implement Cluster Autoscaler for managing node count.

5. **Rollback**:
   - Have a rollback plan in place using CodeDeploy's built-in rollback feature.

### Guidance Document

#### Overview

This document provides guidance on how to set up a CI/CD pipeline using AWS services to deploy a microservice application to EKS. The solution leverages CodePipeline, CodeBuild, CodeDeploy, and Helm to automate the build and deployment process.

#### Steps to Implement

1. **Set up the EKS cluster**: Follow AWS documentation to create and configure your EKS cluster.
2. **Create Docker images**: Write Dockerfiles for your microservices and ensure they build properly.
3. **Set up AWS CodeCommit**: Push your application code to an AWS CodeCommit repository.
4. **Create a CodeBuild project**: Define the buildspec.yml for building your Docker images and pushing them to ECR.
5. **Configure AWS CodePipeline**: Use the provided YAML configuration to set up the pipeline.
6. **Deploy using Helm**: Use Helm charts to manage your Kubernetes deployments, ensuring they are configured correctly for your environment.

#### Conclusion

By following the above pipeline setup and best practices, you will achieve a robust, secure, and maintainable CI/CD process for deploying microservices to Amazon EKS. Ensure to continuously monitor and improve your pipeline based on feedback and performance metrics.

### Additional Resources
- [AWS CodePipeline Documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html)
- [Helm Documentation](https://helm.sh/docs/)
- [Amazon EKS Documentation](https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html)
- [AWS CodeDeploy Documentation](https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html)

Feel free to customize the pipeline and configurations to fit your specific use case and organizational policies.