Creating a CI/CD pipeline for deploying a microservice application to Amazon EKS (Elastic Kubernetes Service) using AWS CodeDeploy and Helm involves several steps. Below, I will outline the structure of the pipeline, provide relevant code snippets, and include best practices for security, monitoring, maintainability, scalability, and vulnerability management.

### AWS CodeDeploy CI/CD Pipeline for EKS with Helm

#### Prerequisites:
1. **AWS Account**: Make sure you have access to an AWS account with permissions to create EKS, IAM roles, and CodeDeploy resources.
2. **EKS Cluster**: An EKS cluster should be created and configured.
3. **Helm**: Ensure that Helm is installed and configured on your local machine and on your CI/CD environment.
4. **Docker**: Your microservice should be containerized and pushed to Amazon ECR (Elastic Container Registry).
5. **IAM Roles**: Ensure you have IAM roles set up for CodePipeline, CodeBuild, and CodeDeploy.

#### Pipeline Structure:
1. **Source Stage**: Fetch the code from a repository (e.g., GitHub or CodeCommit).
2. **Build Stage**: Build the Docker image and push it to ECR.
3. **Deploy Stage**: Use Helm to deploy the application to the EKS cluster.

### Example Pipeline Template (AWS CloudFormation)

```yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: CI/CD Pipeline for EKS using CodeDeploy and Helm

Resources:
  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MyEKSDeploymentPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: <github-owner>
                Repo: <repository-name>
                Branch: <branch-name>
                OAuthToken: <github-oauth-token>
        
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref BuildProject

        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref DeploymentGroup
```

### CodeBuild Specification File (buildspec.yml)

```yaml
version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <account-id>.dkr.ecr.<region>.amazonaws.com
      - REPOSITORY_URI=<account-id>.dkr.ecr.<region>.amazonaws.com/<repository-name>
      - IMAGE_TAG=latest

  build:
    commands:
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker push $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Writing image definitions...
      - printf '[{"name":"<container-name>","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
```

### Helm Chart for Deployment

Your Helm chart should have the necessary configurations to deploy the application. Below is a simple structure:

```
my-microservice/
  Chart.yaml
  values.yaml
  templates/
    deployment.yaml
    service.yaml
```

**Example of `deployment.yaml`**:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          ports:
            - containerPort: {{ .Values.service.port }}
```

### Best Practices for Deployment

1. **Security**:
   - Use IAM roles and policies with the principle of least privilege.
   - Enable encryption for data at rest and in transit.
   - Regularly update dependencies and images to mitigate vulnerabilities.

2. **Monitoring**:
   - Integrate CloudWatch for logging and monitoring.
   - Consider using Prometheus and Grafana for advanced metrics and visualization.
   - Implement alerts for critical application metrics.

3. **Maintainability**:
   - Use Helm for managing Kubernetes applications, as it eases updates and rollbacks.
   - Document your CI/CD processes and configurations.

4. **Scalability**:
   - Use Horizontal Pod Autoscaler (HPA) for automatic scaling of pods.
   - Configure resource requests and limits in your Kubernetes deployment.

5. **Vulnerability Management**:
   - Use tools such as AWS Inspector or Aqua Security for vulnerability scanning of container images.
   - Implement a rollback strategy in your deployment to revert to a previous stable version in case of failure.

### Guidance Document

#### Steps to Implement the Pipeline

1. **Create EKS Cluster**: Use the AWS console or CLI to create an EKS cluster.
2. **Set Up IAM Roles**: Create IAM roles for CodePipeline, CodeBuild, and CodeDeploy with appropriate permissions.
3. **Create ECR Repository**: Set up an ECR repository to store your Docker images.
4. **Configure AWS CodePipeline**: Deploy the CloudFormation template to set up the pipeline.
5. **Create Helm Chart**: Create a Helm chart for your microservice.
6. **Test the Pipeline**: Make changes to your code repository and verify that the pipeline triggers and deploys your application successfully.

By following the above steps and utilizing the provided code snippets, you can build a robust CI/CD pipeline for deploying microservices to Amazon EKS using AWS services and Helm.